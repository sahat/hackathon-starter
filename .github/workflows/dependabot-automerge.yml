name: Dependabot Automerge

on:
  workflow_run:
    workflows: ['Node.js CI']
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  dependabot-automerge:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      contains(toJson(github.event.workflow_run.pull_requests), 'dependabot[bot]') &&
      contains(toJson(github.event.workflow_run.pull_requests), 'master')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Automerge Dependabot PRs if all checks have passed
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRS_JSON: ${{ toJson(github.event.workflow_run.pull_requests) }}
          REPO: ${{ github.repository }}
        run: |
          PR_NUM=$(jq -r '.[0].number' <<<"$PRS_JSON")
          echo "Attempting to merge PR #${PR_NUM} in ${REPO}"
          gh pr merge "$PR_NUM" --squash --auto

  dependabot-automerge-debug:
    # Debug job: always run to capture the workflow_run payload for troubleshooting
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Dump workflow_run payload (safe)
        # Use toJson to capture the workflow_run and pull_requests; do not print secrets.
        env:
          WF_JSON: ${{ toJson(github.event.workflow_run) }}
          PRS_JSON: ${{ toJson(github.event.workflow_run.pull_requests) }}
          EVENT: ${{ github.event.workflow_run.event }}
          CONCLUSION: ${{ github.event.workflow_run.conclusion }}
        run: |
          echo "--- workflow_run.event ---"
          echo "${EVENT}"
          echo "--- workflow_run.conclusion ---"
          echo "${CONCLUSION}"
          echo "--- pull_requests (raw JSON) ---"
          echo "${PRS_JSON}"
          # Use jq (available on Ubuntu runners) to inspect array length and first item safely
          PR_COUNT=$(jq -r 'length' <<<"${PRS_JSON}") || PR_COUNT=0
          echo "PR count: ${PR_COUNT}"
          if [ "${PR_COUNT}" -gt 0 ]; then
            echo "PR[0].number: $(jq -r '.[0].number' <<<"${PRS_JSON}")"
            echo "PR[0].user.login: $(jq -r '.[0].user.login' <<<"${PRS_JSON}")"
            echo "PR[0].base.ref: $(jq -r '.[0].base.ref' <<<"${PRS_JSON}")"
          else
            echo "No pull_requests present in workflow_run payload"
          fi

  Sync-patches-after-dependabot-automerge:
    needs: [dependabot-automerge]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: master

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Rename patch-package files to match current versions
        id: rename-patches
        shell: bash
        run: |
          shopt -s nullglob

          get_version() {
            jq -r ".dependencies[\"$1\"] // .devDependencies[\"$1\"]" package.json
          }

          CHANGED=0

          for PATCH in patches/*.patch; do
            BASE=$(basename "$PATCH" .patch)

            NAME_WITHOUT_VERSION="${BASE%+*}"
            if [[ "$NAME_WITHOUT_VERSION" == @*+* ]]; then
              PACKAGE="${NAME_WITHOUT_VERSION/+//}"
            else
              PACKAGE="$NAME_WITHOUT_VERSION"
            fi

            VERSION=$(get_version "$PACKAGE")

            if [ "$VERSION" == "null" ]; then
              echo "Skipping $PACKAGE â€” not found in package.json"
              continue
            fi

            VERSION="${VERSION#^}"
            NEW_NAME="$(echo "$PACKAGE" | sed 's|/|+|g')+${VERSION}.patch"

            if [ "$BASE.patch" != "$NEW_NAME" ]; then
              echo "Renaming $BASE.patch -> $NEW_NAME"
              git mv "$PATCH" "patches/$NEW_NAME"
              CHANGED=1
            fi
          done

          # Expose whether any files changed as a step output so it can be safely
          # referenced by later step `if` conditions without static analyzer warnings.
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Install dependencies
        if: ${{ steps.rename-patches.outputs.changed == '1' }}
        run: npm ci

      - name: Run tests
        if: ${{ steps.rename-patches.outputs.changed == '1' }}
        run: npm test

      - name: Run e2e tests
        if: ${{ steps.rename-patches.outputs.changed == '1' && (github.repository == 'sahat/hackathon-starter' || github.repository == 'YasharF/hackathon-starter') }}
        run: npm run test:e2e-nokey

      - name: Commit and push patch renames
        if: ${{ steps.rename-patches.outputs.changed == '1' }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add patches/
          git commit -m "chore: sync patch-package filenames with current versions"
          git push
