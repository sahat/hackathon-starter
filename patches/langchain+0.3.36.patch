diff --git a/node_modules/langchain/dist/embeddings/cache_backed.cjs b/node_modules/langchain/dist/embeddings/cache_backed.cjs
index fcd1a1f..056c868 100644
--- a/node_modules/langchain/dist/embeddings/cache_backed.cjs
+++ b/node_modules/langchain/dist/embeddings/cache_backed.cjs
@@ -66,16 +66,16 @@ class CacheBackedEmbeddings extends embeddings_1.Embeddings {
             writable: true,
             value: void 0
         });
+
         this.underlyingEmbeddings = fields.underlyingEmbeddings;
         this.documentEmbeddingStore = fields.documentEmbeddingStore;
+        this.queryEmbeddingStore = fields.queryEmbeddingStore ?? null;
     }
     /**
      * Embed query text.
      *
-     * This method does not support caching at the moment.
-     *
-     * Support for caching queries is easy to implement, but might make
-     * sense to hold off to see the most common patterns.
+     * Patched with caching support (CommonJS only) because
+     * caching queries is not yet supported in LangChain core.
      *
      * If the cache has an eviction policy, we may need to be a bit more careful
      * about sharing the cache between documents and queries. Generally,
@@ -85,6 +85,15 @@ class CacheBackedEmbeddings extends embeddings_1.Embeddings {
      * @returns The embedding for the given text.
      */
     async embedQuery(document) {
+        if (this.queryEmbeddingStore) {
+            const cachedEmbedding = await this.queryEmbeddingStore.mget([document]);
+            if (cachedEmbedding[0]) {
+                return cachedEmbedding[0];
+            }
+            const embedding = await this.underlyingEmbeddings.embedQuery(document);
+            await this.queryEmbeddingStore.mset([[document, embedding]]);
+            return embedding;
+        }
         return this.underlyingEmbeddings.embedQuery(document);
     }
     /**
@@ -123,6 +132,7 @@ class CacheBackedEmbeddings extends embeddings_1.Embeddings {
      * @param underlyingEmbeddings Embeddings used to populate the cache for new documents.
      * @param documentEmbeddingStore Stores raw document embedding values. Keys are hashes of the document content.
      * @param options.namespace Optional namespace for store keys.
+     * @param options.queryEmbeddingStore Optional - Stores raw query embedding values. Keys are hashes of the query content.
      * @returns A new CacheBackedEmbeddings instance.
      */
     static fromBytesStore(underlyingEmbeddings, documentEmbeddingStore, options) {
@@ -134,9 +144,18 @@ class CacheBackedEmbeddings extends embeddings_1.Embeddings {
             valueSerializer: (value) => encoder.encode(JSON.stringify(value)),
             valueDeserializer: (serializedValue) => JSON.parse(decoder.decode(serializedValue)),
         });
+        const queryEncoderBackedStore = options.queryEmbeddingStore
+            ? new encoder_backed_js_1.EncoderBackedStore({
+                  store: options.queryEmbeddingStore,
+                  keyEncoder: (key) => (options?.namespace ?? "") + (0, hash_1.insecureHash)(key),
+                  valueSerializer: (value) => encoder.encode(JSON.stringify(value)),
+                  valueDeserializer: (serializedValue) => JSON.parse(decoder.decode(serializedValue)),
+              })
+            : null;
         return new this({
             underlyingEmbeddings,
             documentEmbeddingStore: encoderBackedStore,
+            queryEmbeddingStore: queryEncoderBackedStore,
         });
     }
 }
